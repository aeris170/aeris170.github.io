function _argumentsToArray(a){return[].concat.apply([],Array.prototype.slice.apply(a))}function radians(a){return a*Math.PI/180}function vec2(){var a=_argumentsToArray(arguments);switch(a.length){case 0:a.push(0);case 1:a.push(0)}return a.splice(0,2)}function vec3(){var a=_argumentsToArray(arguments);switch(a.length){case 0:a.push(0);case 1:a.push(0);case 2:a.push(0)}return a.splice(0,3)}function vec4(){var a=_argumentsToArray(arguments);switch(a.length){case 0:a.push(0);case 1:a.push(0);case 2:a.push(0);case 3:a.push(1)}return a.splice(0,4)}function mat2(){var b=_argumentsToArray(arguments);var a=[];switch(b.length){case 0:b[0]=1;case 1:a=[vec2(b[0],0),vec2(0,b[0])];break;default:a.push(vec2(b));b.splice(0,2);a.push(vec2(b));break}a.matrix=true;return a}function mat3(){var b=_argumentsToArray(arguments);var a=[];switch(b.length){case 0:b[0]=1;case 1:a=[vec3(b[0],0,0),vec3(0,b[0],0),vec3(0,0,b[0])];break;default:a.push(vec3(b));b.splice(0,3);a.push(vec3(b));b.splice(0,3);a.push(vec3(b));break}a.matrix=true;return a}function mat4(){var b=_argumentsToArray(arguments);var a=[];switch(b.length){case 0:b[0]=1;case 1:a=[vec4(b[0],0,0,0),vec4(0,b[0],0,0),vec4(0,0,b[0],0),vec4(0,0,0,b[0])];break;default:a.push(vec4(b));b.splice(0,4);a.push(vec4(b));b.splice(0,4);a.push(vec4(b));b.splice(0,4);a.push(vec4(b));break}a.matrix=true;return a}function equal(c,a){if(c.length!=a.length){return false}if(c.matrix&&a.matrix){for(var d=0;d<c.length;++d){if(c[d].length!=a[d].length){return false}for(var b=0;b<c[d].length;++b){if(c[d][b]!==a[d][b]){return false}}}}else{if(c.matrix&&!a.matrix||!c.matrix&&a.matrix){return false}else{for(var d=0;d<c.length;++d){if(c[d]!==a[d]){return false}}}}return true}function add(d,b){var a=[];if(d.matrix&&b.matrix){if(d.length!=b.length){throw"add(): trying to add matrices of different dimensions"}for(var e=0;e<d.length;++e){if(d[e].length!=b[e].length){throw"add(): trying to add matrices of different dimensions"}a.push([]);for(var c=0;c<d[e].length;++c){a[e].push(d[e][c]+b[e][c])}}a.matrix=true;return a}else{if(d.matrix&&!b.matrix||!d.matrix&&b.matrix){throw"add(): trying to add matrix and non-matrix variables"}else{if(d.length!=b.length){throw"add(): vectors are not the same dimension"}for(var e=0;e<d.length;++e){a.push(d[e]+b[e])}return a}}}function subtract(d,b){var a=[];if(d.matrix&&b.matrix){if(d.length!=b.length){throw"subtract(): trying to subtract matrices of different dimensions"}for(var e=0;e<d.length;++e){if(d[e].length!=b[e].length){throw"subtract(): trying to subtact matrices of different dimensions"}a.push([]);for(var c=0;c<d[e].length;++c){a[e].push(d[e][c]-b[e][c])}}a.matrix=true;return a}else{if(d.matrix&&!b.matrix||!d.matrix&&b.matrix){throw"subtact(): trying to subtact  matrix and non-matrix variables"}else{if(d.length!=b.length){throw"subtract(): vectors are not the same length"}for(var e=0;e<d.length;++e){a.push(d[e]-b[e])}return a}}}function mult(e,c){var a=[];if(e.matrix&&c.matrix){if(e.length!=c.length){throw"mult(): trying to add matrices of different dimensions"}for(var f=0;f<e.length;++f){if(e[f].length!=c[f].length){throw"mult(): trying to add matrices of different dimensions"}}for(var f=0;f<e.length;++f){a.push([]);for(var d=0;d<c.length;++d){var g=0;for(var b=0;b<e.length;++b){g+=e[f][b]*c[b][d]}a[f].push(g)}}a.matrix=true;return a}else{if(e.length!=c.length){throw"mult(): vectors are not the same dimension"}for(var f=0;f<e.length;++f){a.push(e[f]*c[f])}return a}}function translate(b,d,c){if(Array.isArray(b)&&b.length==3){c=b[2];d=b[1];b=b[0]}var a=mat4();a[0][3]=b;a[1][3]=d;a[2][3]=c;return a}function rotate(b,a){if(!Array.isArray(a)){a=[arguments[1],arguments[2],arguments[3]]}var h=normalize(a);var g=h[0];var f=h[1];var e=h[2];var d=Math.cos(radians(b));var i=1-d;var k=Math.sin(radians(b));var j=mat4(vec4(g*g*i+d,g*f*i-e*k,g*e*i+f*k,0),vec4(g*f*i+e*k,f*f*i+d,f*e*i-g*k,0),vec4(g*e*i-f*k,f*e*i+g*k,e*e*i+d,0),vec4());return j}function scale(b,d,c){if(Array.isArray(b)&&b.length==3){c=b[2];d=b[1];b=b[0]}var a=mat4();a[0][0]=b;a[1][1]=d;a[2][2]=c;return a}function lookAt(d,c,b){if(!Array.isArray(d)||d.length!=3){throw"lookAt(): first parameter [eye] must be an a vec3"}if(!Array.isArray(c)||c.length!=3){throw"lookAt(): first parameter [at] must be an a vec3"}if(!Array.isArray(b)||b.length!=3){throw"lookAt(): first parameter [up] must be an a vec3"}if(equal(d,c)){return mat4()}var e=normalize(subtract(c,d));var g=normalize(cross(e,b));var f=normalize(cross(g,e));e=negate(e);var a=mat4(vec4(g,-dot(g,d)),vec4(f,-dot(f,d)),vec4(e,-dot(e,d)),vec4());return a}function ortho(b,k,a,i,f,e){if(b==k){throw"ortho(): left and right are equal"}if(a==i){throw"ortho(): bottom and top are equal"}if(f==e){throw"ortho(): near and far are equal"}var j=k-b;var c=i-a;var g=e-f;var l=mat4();l[0][0]=2/j;l[1][1]=2/c;l[2][2]=-2/g;l[0][3]=-(b+k)/j;l[1][3]=-(i+a)/c;l[2][3]=-(f+e)/g;return l}function perspective(e,c,g,b){var h=1/Math.tan(radians(e)/2);var i=b-g;var a=mat4();a[0][0]=h/c;a[1][1]=h;a[2][2]=-(g+b)/i;a[2][3]=-2*g*b/i;a[3][2]=-1;a[3][3]=0;return a}function transpose(b){if(!b.matrix){return"transpose(): trying to transpose a non-matrix"}var a=[];for(var d=0;d<b.length;++d){a.push([]);for(var c=0;c<b[d].length;++c){a[d].push(b[c][d])}}a.matrix=true;return a}function dot(b,a){if(b.length!=a.length){throw"dot(): vectors are not the same dimension"}var d=0;for(var c=0;c<b.length;++c){d+=b[c]*a[c]}return d}function negate(b){var a=[];for(var c=0;c<b.length;++c){a.push(-b[c])}return a}function cross(c,b){if(!Array.isArray(c)||c.length<3){throw"cross(): first argument is not a vector of at least 3"}if(!Array.isArray(b)||b.length<3){throw"cross(): second argument is not a vector of at least 3"}var a=[c[1]*b[2]-c[2]*b[1],c[2]*b[0]-c[0]*b[2],c[0]*b[1]-c[1]*b[0]];return a}function length(a){return Math.sqrt(dot(a,a))}function normalize(b,d){if(d){var e=b.pop()}var a=length(b);if(!isFinite(a)){throw"normalize: vector "+b+" has zero length"}for(var c=0;c<b.length;++c){b[c]/=a}if(d){b.push(e)}return b}function mix(c,b,e){if(typeof e!=="number"){throw"mix: the last paramter "+e+" must be a number"}if(c.length!=b.length){throw"vector dimension mismatch"}var a=[];for(var d=0;d<c.length;++d){a.push((1-e)*c[d]+e*b[d])}return a}function scaleVector(d,b){if(!Array.isArray(b)){throw"scale: second parameter "+b+" is not a vector"}var a=[];for(var c=0;c<b.length;++c){a.push(d*b[c])}return a}function flatten(b){if(b.matrix===true){b=transpose(b)}var g=b.length;var e=false;if(Array.isArray(b[0])){e=true;g*=b[0].length}var f=new Float32Array(g);if(e){var a=0;for(var d=0;d<b.length;++d){for(var c=0;c<b[d].length;++c){f[a++]=b[d][c]}}}else{for(var d=0;d<b.length;++d){f[d]=b[d]}}return f}var sizeof={vec2:new Float32Array(flatten(vec2())).byteLength,vec3:new Float32Array(flatten(vec3())).byteLength,vec4:new Float32Array(flatten(vec4())).byteLength,mat2:new Float32Array(flatten(mat2())).byteLength,mat3:new Float32Array(flatten(mat3())).byteLength,mat4:new Float32Array(flatten(mat4())).byteLength};